// GENERATED CODE - DO NOT MODIFY BY HAND
// This code was generated by ObjectBox. To update it run the generator again:
// With a Flutter package, run `flutter pub run build_runner build`.
// With a Dart package, run `dart run build_runner build`.
// See also https://docs.objectbox.io/getting-started#generate-objectbox-code

// ignore_for_file: camel_case_types, depend_on_referenced_packages
// coverage:ignore-file

import 'dart:typed_data';

import 'package:flat_buffers/flat_buffers.dart' as fb;
import 'package:objectbox/internal.dart'; // generated code can access "internal" functionality
import 'package:objectbox/objectbox.dart';
import 'package:objectbox_flutter_libs/objectbox_flutter_libs.dart';

import 'src/models/entity/notas_model.dart';
import 'src/models/entity/usuarios_model.dart';

export 'package:objectbox/objectbox.dart'; // so that callers only have to import this file

final _entities = <ModelEntity>[
  ModelEntity(
      id: const IdUid(1, 8377765019169121678),
      name: 'Notas',
      lastPropertyId: const IdUid(4, 8273740672448647943),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 5319500462206731464),
            name: 'id',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(2, 2415189285118256045),
            name: 'title',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(3, 4771438894364702176),
            name: 'nota',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(4, 8273740672448647943),
            name: 'usuarioId',
            type: 11,
            flags: 520,
            indexId: const IdUid(1, 2771731230358029155),
            relationTarget: 'Users')
      ],
      relations: <ModelRelation>[],
      backlinks: <ModelBacklink>[]),
  ModelEntity(
      id: const IdUid(2, 1267783113213366495),
      name: 'Users',
      lastPropertyId: const IdUid(4, 4848791538483509360),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 765952394509557724),
            name: 'id',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(2, 5379687469752325083),
            name: 'name',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(3, 6777356631176485161),
            name: 'email',
            type: 9,
            flags: 2080,
            indexId: const IdUid(2, 803486874937427247)),
        ModelProperty(
            id: const IdUid(4, 4848791538483509360),
            name: 'pass',
            type: 9,
            flags: 0)
      ],
      relations: <ModelRelation>[],
      backlinks: <ModelBacklink>[])
];

/// Open an ObjectBox store with the model declared in this file.
Future<Store> openStore(
        {String? directory,
        int? maxDBSizeInKB,
        int? fileMode,
        int? maxReaders,
        bool queriesCaseSensitiveDefault = true,
        String? macosApplicationGroup}) async =>
    Store(getObjectBoxModel(),
        directory: directory ?? (await defaultStoreDirectory()).path,
        maxDBSizeInKB: maxDBSizeInKB,
        fileMode: fileMode,
        maxReaders: maxReaders,
        queriesCaseSensitiveDefault: queriesCaseSensitiveDefault,
        macosApplicationGroup: macosApplicationGroup);

/// ObjectBox model definition, pass it to [Store] - Store(getObjectBoxModel())
ModelDefinition getObjectBoxModel() {
  final model = ModelInfo(
      entities: _entities,
      lastEntityId: const IdUid(2, 1267783113213366495),
      lastIndexId: const IdUid(2, 803486874937427247),
      lastRelationId: const IdUid(0, 0),
      lastSequenceId: const IdUid(0, 0),
      retiredEntityUids: const [],
      retiredIndexUids: const [],
      retiredPropertyUids: const [],
      retiredRelationUids: const [],
      modelVersion: 5,
      modelVersionParserMinimum: 5,
      version: 1);

  final bindings = <Type, EntityDefinition>{
    Notas: EntityDefinition<Notas>(
        model: _entities[0],
        toOneRelations: (Notas object) => [object.usuario],
        toManyRelations: (Notas object) => {},
        getId: (Notas object) => object.id,
        setId: (Notas object, int id) {
          object.id = id;
        },
        objectToFB: (Notas object, fb.Builder fbb) {
          final titleOffset = fbb.writeString(object.title);
          final notaOffset = fbb.writeString(object.nota);
          fbb.startTable(5);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, titleOffset);
          fbb.addOffset(2, notaOffset);
          fbb.addInt64(3, object.usuario.targetId);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);

          final object = Notas(
              title: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 6, ''),
              nota: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 8, ''))
            ..id = const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);
          object.usuario.targetId =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 10, 0);
          object.usuario.attach(store);
          return object;
        }),
    Users: EntityDefinition<Users>(
        model: _entities[1],
        toOneRelations: (Users object) => [],
        toManyRelations: (Users object) => {},
        getId: (Users object) => object.id,
        setId: (Users object, int id) {
          object.id = id;
        },
        objectToFB: (Users object, fb.Builder fbb) {
          final nameOffset = fbb.writeString(object.name);
          final emailOffset = fbb.writeString(object.email);
          final passOffset = fbb.writeString(object.pass);
          fbb.startTable(5);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, nameOffset);
          fbb.addOffset(2, emailOffset);
          fbb.addOffset(3, passOffset);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);

          final object = Users(
              name: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 6, ''),
              email: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 8, ''),
              pass: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 10, ''))
            ..id = const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);

          return object;
        })
  };

  return ModelDefinition(model, bindings);
}

/// [Notas] entity fields to define ObjectBox queries.
class Notas_ {
  /// see [Notas.id]
  static final id = QueryIntegerProperty<Notas>(_entities[0].properties[0]);

  /// see [Notas.title]
  static final title = QueryStringProperty<Notas>(_entities[0].properties[1]);

  /// see [Notas.nota]
  static final nota = QueryStringProperty<Notas>(_entities[0].properties[2]);

  /// see [Notas.usuario]
  static final usuario =
      QueryRelationToOne<Notas, Users>(_entities[0].properties[3]);
}

/// [Users] entity fields to define ObjectBox queries.
class Users_ {
  /// see [Users.id]
  static final id = QueryIntegerProperty<Users>(_entities[1].properties[0]);

  /// see [Users.name]
  static final name = QueryStringProperty<Users>(_entities[1].properties[1]);

  /// see [Users.email]
  static final email = QueryStringProperty<Users>(_entities[1].properties[2]);

  /// see [Users.pass]
  static final pass = QueryStringProperty<Users>(_entities[1].properties[3]);
}
